# -*- coding: utf-8 -*-

from typing import Dict
from enum import IntEnum


# --- Constants & Mappings ---
START_BYTE = 0x02
END_BYTE = 0x03
ACK_BYTES = b"\x06\x00"


# Define memory addresses as constants
RING_BUF_ADDRS_ADDR = 0xFD00 
FRAME_NUMBER_ADDR = 0xFD21
TOTAL_SHOTS_ADDR = 0xFD22
SHUTTER_SPEED_ADDR = 0xFD25
EXPOSURE_MODE_ADDR = 0xFD26
VARI_PROGRAM_MODE_ADDR = 0xFD27
METERING_SYSTEM_ADDR = 0xFD28
FILM_ADVANCE_MODE_ADDR = 0xFD29
FLASH_MODE_ADDR = 0xFD2A
FOCUS_AREA_ADDR = 0xFD2B
ISO_ADDR = 0xFD2C
EXPOSURE_COMPENSATION_ADDR = 0xFD2D
SELF_TIMER_ADDR = 0xFD2E
CUSTOM_PROGRAM_SETTINGS_ADDR = 0xFD36
CUSTOM_PROGRAM_SETTINGS_ADDR = 0xFD3C
ROLL_NUMBER_ADDR = 0xFD3E
MEMO_SETTINGS_ADDR = 0xFD40
CURRENT_MEMO_PTR_ADDR = 0xFD42
MEMO_START_PTR_ADDR = 0xFD44
ROLL_START_PTR_ADDR = 0xFD46
FOCUS_FLAGS_ADDR = 0xFE20
LENS_FLAGS_ADDR = 0xFE21
FOCUS_FLAGS_2_ADDR = 0xFE22
APERTURE_ADDR = 0xFE25



SHUTTER_SPEEDS: Dict[int, float] = {
  0x00: float('inf'), 0x01: float('nan'), 0x02: float('nan'), 0x03: float('nan'),
  0x04: 30.0, 0x05: 25.0, 0x06: 20.0, 0x07: 20.0, 0x08: 15.0, 0x09: 13.0, 0x0A: 10.0,
  0x0B: 10.0, 0x0C: 8.0, 0x0D: 6.0, 0x0E: 6.0, 0x0F: 5.0, 0x10: 4.0, 0x11: 4.0,
  0x12: 3.0, 0x13: 2.5, 0x14: 2.0, 0x15: 1.6, 0x16: 1.45, 0x17: 1.3, 0x18: 1.0,
  0x19: 1/1.3, 0x1A: 1/1.5, 0x1B: 1/1.6, 0x1C: 1/2.0, 0x1D: 1/2.5, 0x1E: 1/3.0, 0x1F: 1/3.0,
  0x20: 1/4.0, 0x21: 1/5.0, 0x22: 1/6.0, 0x23: 1/6.0, 0x24: 1/8.0, 0x25: 1/10.0, 0x26: 1/10.0,
  0x27: 1/13.0, 0x28: 1/15.0, 0x29: 1/20.0, 0x2A: 1/20.0, 0x2B: 1/25.0, 0x2C: 1/30.0, 0x2D: 1/40.0,
  0x2E: 1/45.0, 0x2F: 1/50.0, 0x30: 1/60.0, 0x31: 1/80.0, 0x32: 1/90.0, 0x33: 1/100.0, 0x34: 1/125.0,
  0x35: 1/160.0, 0x36: 1/180.0, 0x37: 1/200.0, 0x38: 1/250.0, 0x39: 1/320.0, 0x3A: 1/350.0, 0x3B: 1/400.0,
  0x3C: 1/500.0, 0x3D: 1/640.0, 0x3E: 1/750.0, 0x3F: 1/800.0, 0x40: 1/1000.0, 0x41: 1/1250.0, 0x42: 1/1500.0,
  0x43: 1/1600.0, 0x44: 1/2000.0, 0x45: 1/2500.0, 0x46: 1/3000.0, 0x47: 1/3200.0, 0x48: 1/4000.0, 0x49: 1/5000.0,
  0x4A: 1/6000.0, 0x4B: 1/6400.0, 0x4C: 1/8000.0, 0x54: float('inf'), 0x55: float('inf'), 0x56: float('-inf')
}

EXPOSURE_COMPENSATION: Dict[int, float] = {
  0x00: 0.0, 0x01: -0.2, 0x02: -0.3, 0x03: -0.5, 0x04: -0.7, 0x05: -0.8, 0x06: -1.0,
  0x07: -1.2, 0x08: -1.3, 0x09: -1.5, 0x0A: -1.7, 0x0B: -1.8, 0x0C: -2.0, 0x0D: -2.2,
  0x0E: -2.3, 0x0F: -2.5, 0x10: -2.7, 0x11: -2.8, 0x12: -3.0, 0x13: -3.2, 0x14: -3.3,
  0x15: -3.5, 0x16: -3.7, 0x17: -3.8, 0x18: -4.0, 0x19: -4.2, 0x1A: -4.3, 0x1B: -4.5,
  0x1C: -4.7, 0x1D: -4.8, 0x1E: -5.0, 0x1F: -5.2, 0x20: -5.3, 0x21: -5.5, 0x22: -5.7,
  0x23: -5.8, 0x24: -6.0, 0x25: -6.2, 0x26: -6.3, 0x27: -6.5, 0x28: -6.7, 0x29: -6.8,
  0x2A: -7.0, 0x2B: -7.2, 0x2C: -7.3, 0x2D: -7.5, 0x2E: -7.7, 0x2F: -7.8, 0x30: -8.0,
  0x31: -8.2, 0x32: -8.3, 0x33: -8.5, 0x34: -8.7, 0x35: -8.8, 0x36: -9.0, 0x37: -9.2,
  0x38: -9.3, 0x39: -9.5, 0x3A: -9.7, 0x3B: -9.8, 0x3C: -10.0, 0x3D: -10.2, 0x3E: -10.3,
  0x3F: -10.5, 0x40: -10.7, 0x41: -10.8, 0x42: -11.0, 0x43: -11.2, 0x44: -11.3, 0x45: -11.5,
  0x46: -11.7, 0x47: -11.8, 0x48: -12.0, 0x49: -12.2, 0x4A: -12.3, 0x4B: -12.5, 0x4C: -12.7,
  0x4D: -12.8, 0x4E: -13.0, 0x4F: -13.2, 0x50: -13.3, 0x51: -13.5, 0x52: -13.7, 0x53: -13.8,
  0x54: -14.0, 0x55: -14.2, 0x56: -14.3, 0x57: -14.5, 0x58: -14.7, 0x59: -14.8, 0x5A: -15.0,
  0x5B: -15.2, 0x5C: -15.3, 0x5D: -15.5, 0x5E: -15.7, 0x5F: -15.8, 0x60: -16.0, 0x61: -16.2,
  0x62: -16.3, 0x63: -16.5, 0x64: -16.7, 0x65: -16.8, 0x66: -17.0, 0x67: -17.2, 0x68: -17.3,
  0x69: -17.5, 0x6A: -17.7, 0x6B: -17.8, 0x6C: -18.0, 0x6D: -18.2, 0x6E: -18.3, 0x6F: -18.5,
  0x70: -18.7, 0x71: -18.8, 0x72: -19.0, 0x73: -19.2, 0x74: -19.3, 0x75: -19.5, 0x76: -19.7,
  0x77: -19.8, 0x78: -20.0, 0x79: -20.0, 0x7A: -20.0, 0x7B: -20.0, 0x7C: -20.0, 0x7D: -20.0,
  0x7E: -20.0, 0x7F: -20.0, 0x80: 20.0, 0x81: 20.0, 0x82: 20.0, 0x83: 20.0, 0x84: 20.0,
  0x85: 20.0, 0x86: 20.0, 0x87: 20.0, 0x88: 20.0, 0x89: 19.8, 0x8A: 19.7, 0x8B: 19.5,
  0x8C: 19.3, 0x8D: 19.2, 0x8E: 19.0, 0x8F: 18.8, 0x90: 18.7, 0x91: 18.5, 0x92: 18.3,
  0x93: 18.2, 0x94: 18.0, 0x95: 17.8, 0x96: 17.7, 0x97: 17.5, 0x98: 17.3, 0x99: 17.2,
  0x9A: 17.0, 0x9B: 16.8, 0x9C: 16.7, 0x9D: 16.5, 0x9E: 16.3, 0x9F: 16.2, 0xA0: 16.0,
  0xA1: 15.8, 0xA2: 15.7, 0xA3: 15.5, 0xA4: 15.3, 0xA5: 15.2, 0xA6: 15.0, 0xA7: 14.8,
  0xA8: 14.7, 0xA9: 14.5, 0xAA: 14.3, 0xAB: 14.2, 0xAC: 14.0, 0xAD: 13.8, 0xAE: 13.7,
  0xAF: 13.5, 0xB0: 13.3, 0xB1: 13.2, 0xB2: 13.0, 0xB3: 12.8, 0xB4: 12.7, 0xB5: 12.5,
  0xB6: 12.3, 0xB7: 12.2, 0xB8: 12.0, 0xB9: 11.8, 0xBA: 11.7, 0xBB: 11.5, 0xBC: 11.3,
  0xBD: 11.2, 0xBE: 11.0, 0xBF: 10.8, 0xC0: 10.7, 0xC1: 10.5, 0xC2: 10.3, 0xC3: 10.2,
  0xC4: 10.0, 0xC5: 9.8, 0xC6: 9.7, 0xC7: 9.5, 0xC8: 9.3, 0xC9: 9.2, 0xCA: 9.0,
  0xCB: 8.8, 0xCC: 8.7, 0xCD: 8.5, 0xCE: 8.3, 0xCF: 8.2, 0xD0: 8.0, 0xD1: 7.8,
  0xD2: 7.7, 0xD3: 7.5, 0xD4: 7.3, 0xD5: 7.2, 0xD6: 7.0, 0xD7: 6.8, 0xD8: 6.7,
  0xD9: 6.5, 0xDA: 6.3, 0xDB: 6.2, 0xDC: 6.0, 0xDD: 5.8, 0xDE: 5.7, 0xDF: 5.5,
  0xE0: 5.3, 0xE1: 5.2, 0xE2: 5.0, 0xE3: 4.8, 0xE4: 4.7, 0xE5: 4.5, 0xE6: 4.3,
  0xE7: 4.2, 0xE8: 4.0, 0xE9: 3.8, 0xEA: 3.7, 0xEB: 3.5, 0xEC: 3.3, 0xED: 3.2,
  0xEE: 3.0, 0xEF: 2.8, 0xF0: 2.7, 0xF1: 2.5, 0xF2: 2.3, 0xF3: 2.2, 0xF4: 2.0,
  0xF5: 1.8, 0xF6: 1.7, 0xF7: 1.5, 0xF8: 1.3, 0xF9: 1.2, 0xFA: 1.0, 0xFB: 0.8,
  0xFC: 0.7, 0xFD: 0.5, 0xFE: 0.3, 0xFF: 0.2
}

EXPOSURE_MODES: Dict[int, str] = {
  0x00: "Manual", 0x01: "Aperture-Priority Auto", 0x02: "Shutter-Priority Auto",
  0x03: "Programmed Auto", 0x08: "Portrait", 0x09: "Portrait with Red-Eye Reduction",
  0x0A: "Hyperfocal", 0x0B: "Landscape", 0x0C: "Silhouette", 0x0D: "Sport",
  0x0E: "Close-Up", 0x0F: "Custom Program"
}

FOCAL_LENGTHS: Dict[int, float] = {
  0x00: float('nan'), 0x01: 5.0, 0x02: 5.5, 0x03: 5.5, 0x04: 5.5, 0x05: 5.5,
  0x06: 6.0, 0x07: 6.0, 0x08: 6.5, 0x09: 6.5, 0x0A: 6.5, 0x0B: 7.0,
  0x0C: 7.0, 0x0D: 7.0, 0x0E: 7.5, 0x0F: 7.5, 0x10: 8.0, 0x11: 8.0, 
  0x12: 8.5, 0x13: 8.5, 0x14: 9.0, 0x15: 9.0, 0x16: 9.5, 0x17: 9.5,
  0x18: 10.0, 0x19: 10.0, 0x1A: 10.5, 0x1B: 11.0, 0x1C: 11.0, 0x1D: 11.5,
  0x1E: 12.0, 0x1F: 12.0, 0x20: 13.0, 0x21: 13.0, 0x22: 13.0, 0x23: 14.0,
  0x24: 14.0, 0x25: 14.0, 0x26: 15.0, 0x27: 15.0, 0x28: 16.0, 0x29: 16.0,
  0x2A: 17.0, 0x2B: 17.0, 0x2C: 18.0, 0x2D: 18.0, 0x2E: 19.0, 0x2F: 19.0,
  0x30: 20.0, 0x31: 20.0, 0x32: 21.0, 0x33: 22.0, 0x34: 22.0, 0x35: 23.0,
  0x36: 24.0, 0x37: 24.0, 0x38: 25.0, 0x39: 26.0, 0x3A: 26.0, 0x3B: 27.0,
  0x3C: 28.0, 0x3D: 28.0, 0x3E: 30.0, 0x3F: 31.0, 0x40: 32.0, 0x41: 32.0,
  0x42: 34.0, 0x43: 34.0, 0x44: 35.0, 0x45: 36.0, 0x46: 38.0, 0x47: 38.0,
  0x48: 40.0, 0x49: 40.0, 0x4A: 42.0, 0x4B: 44.0, 0x4C: 45.0, 0x4D: 46.0,
  0x4E: 48.0, 0x4F: 48.0, 0x50: 50.0, 0x51: 52.0, 0x52: 52.0, 0x53: 55.0,
  0x54: 56.0, 0x55: 58.0, 0x56: 60.0, 0x57: 62.0, 0x58: 62.0, 0x59: 65.0,
  0x5A: 66.0, 0x5B: 68.0, 0x5C: 70.0, 0x5D: 72.0, 0x5E: 75.0, 0x5F: 78.0,
  0x60: 80.0, 0x61: 82.0, 0x62: 85.0, 0x63: 86.0, 0x64: 90.0, 0x65: 92.0,
  0x66: 95.0, 0x67: 98.0, 0x68: 100.0, 0x69: 102.0, 0x6A: 105.0, 0x6B: 110.0,
  0x6C: 112.0, 0x6D: 116.0, 0x6E: 120.0, 0x6F: 122.0, 0x70: 125.0, 0x71: 130.0,
  0x72: 135.0, 0x73: 135.0, 0x74: 140.0, 0x75: 145.0, 0x76: 150.0, 0x77: 155.0,
  0x78: 160.0, 0x79: 165.0, 0x7A: 171.0, 0x7B: 175.0, 0x7C: 180.0, 0x7D: 185.0,
  0x7E: 190.0, 0x7F: 195.0, 0x80: 200.0, 0x81: 210.0, 0x82: 210.0, 0x83: 220.0,
  0x84: 220.0, 0x85: 230.0, 0x86: 240.0, 0x87: 240.0, 0x88: 250.0, 0x89: 260.0,
  0x8A: 270.0, 0x8B: 270.0, 0x8C: 280.0, 0x8D: 290.0, 0x8E: 300.0, 0x8F: 310.0,
  0x90: 320.0, 0x91: 330.0, 0x92: 340.0, 0x93: 350.0, 0x94: 360.0, 0x95: 370.0,
  0x96: 380.0, 0x97: 390.0, 0x98: 400.0, 0x99: 410.0, 0x9A: 420.0, 0x9B: 440.0,
  0x9C: 450.0, 0x9D: 460.0, 0x9E: 480.0, 0x9F: 490.0, 0xA0: 500.0, 0xA1: 500.0,
  0xA2: 550.0, 0xA3: 550.0, 0xA4: 550.0, 0xA5: 600.0, 0xA6: 600.0, 0xA7: 600.0,
  0xA8: 650.0, 0xA9: 650.0, 0xAA: 650.0, 0xAB: 700.0, 0xAC: 700.0, 0xAD: 750.0,
  0xAE: 750.0, 0xAF: 800.0, 0xB0: 800.0, 0xB1: 800.0, 0xB2: 850.0, 0xB3: 850.0,
  0xB4: 900.0, 0xB5: 900.0, 0xB6: 950.0, 0xB7: 1000.0, 0xB8: 1000.0, 0xB9: 1050.0,
  0xBA: 1050.0, 0xBB: 1100.0, 0xBC: 1150.0, 0xBD: 1150.0, 0xBE: 1200.0, 0xBF: 1250.0,
  0xC0: 1300.0, 0xC1: 1300.0, 0xC2: 1300.0, 0xC3: 1400.0, 0xC4: 1400.0, 0xC5: 1500.0,
  0xC6: 1500.0, 0xC7: 1600.0, 0xC8: 1600.0, 0xC9: 1600.0, 0xCA: 1700.0, 0xCB: 1700.0,
  0xCC: 1800.0, 0xCD: 1800.0, 0xCE: 1900.0, 0xCF: 2000.0, 0xD0: 2000.0, 0xD1: 2100.0,
  0xD2: 2100.0, 0xD3: 2200.0, 0xD4: 2300.0, 0xD5: 2300.0, 0xD6: 2400.0, 0xD7: 2500.0,
  0xD8: 2500.0, 0xD9: 2600.0, 0xDA: 2700.0, 0xDB: 2800.0, 0xDC: 2900.0, 0xDD: 2900.0,
  0xDE: 3000.0, 0xDF: 3100.0, 0xE0: 3200.0, 0xE1: 3300.0, 0xE2: 3400.0, 0xE3: 3500.0,
  0xE4: 3600.0, 0xE5: 3700.0, 0xE6: 3800.0, 0xE7: 3900.0, 0xE8: 4000.0, 0xE9: 4100.0,
  0xEA: 4300.0, 0xEB: 4400.0, 0xEC: 4500.0, 0xED: 4700.0, 0xEE: 4800.0, 0xEF: 4900.0,
  0xF0: 5100.0, 0xF1: 5200.0, 0xF2: 5400.0, 0xF3: 5500.0, 0xF4: 5700.0, 0xF5: 5900.0,
  0xF6: 6000.0, 0xF7: 6200.0, 0xF8: 6400.0, 0xF9: 6600.0, 0xFA: 6800.0, 0xFB: 7000.0,
  0xFC: 7200.0, 0xFD: 7400.0, 0xFE: 7600.0, 0xFF: float('nan'),
}

APERTURES: Dict[int, float] = {
  0x00: 1.0, 0x01: 1.1, 0x02: 1.1, 0x03: 1.2, 0x04: 1.2,
  0x05: 1.3, 0x06: 1.4, 0x07: 1.5, 0x08: 1.6, 0x09: 1.7,
  0x0A: 1.8, 0x0B: 1.9, 0x0C: 2.0, 0x0D: 2.1, 0x0E: 2.2,
  0x0F: 2.4, 0x10: 2.5, 0x11: 2.7, 0x12: 2.8, 0x13: 3.0,
  0x14: 3.2, 0x15: 3.3, 0x16: 3.5, 0x17: 3.8, 0x18: 4.0,
  0x19: 4.2, 0x1A: 4.5, 0x1B: 4.8, 0x1C: 5.0, 0x1D: 5.3,
  0x1E: 5.6, 0x1F: 6.0, 0x20: 6.3, 0x21: 6.7, 0x22: 7.1,
  0x23: 7.6, 0x24: 8.0, 0x25: 8.5, 0x26: 9.0, 0x27: 9.5,
  0x28: 10.0, 0x29: 11.0, 0x2A: 11.0, 0x2B: 12.0, 0x2C: 13.0,
  0x2D: 13.0, 0x2E: 14.0, 0x2F: 15.0, 0x30: 16.0, 0x31: 17.0,
  0x32: 18.0, 0x33: 19.0, 0x34: 20.0, 0x35: 21.0, 0x36: 22.0,
  0x37: 24.0, 0x38: 25.0, 0x39: 27.0, 0x3A: 29.0, 0x3B: 30.0,
  0x3C: 32.0, 0x3D: 34.0, 0x3E: 36.0, 0x3F: 38.0, 0x40: 40.0,
  0x41: 43.0, 0x42: 45.0, 0x43: 48.0, 0x44: 51.0, 0x45: 54.0,
  0x46: 57.0, 0x47: 60.0, 0x48: 64.0, 0x49: 68.0, 0x4A: 72.0,
  0x4B: 76.0, 0x4C: 81.0, 0x4D: 85.0, 0x4E: 90.0,
  0x55: float('inf'), 0x56: float('-inf')
}

ISO_VALUES: Dict[int, int] = {
  0x00: 6, 0x01: 8, 0x02: 10, 0x03: 12, 0x04: 16, 0x05: 20, 0x06: 25, 0x07: 32,
  0x08: 40, 0x09: 50, 0x0A: 64, 0x0B: 80, 0x0C: 100, 0x0D: 125, 0x0E: 160, 0x0F: 200,
  0x10: 250, 0x11: 320, 0x12: 400, 0x13: 500, 0x14: 640, 0x15: 800, 0x16: 1000, 0x17: 1250,
  0x18: 1600, 0x19: 2000, 0x1A: 2500, 0x1B: 3200, 0x1C: 4000, 0x1D: 5000, 0x1E: 6400, 0x1F: -1
}

CAMERA_MODES: Dict[int, str] = {
  0x00: "Program", 0x01: "Shutter Priority", 0x02: "Aperture", 0x03: "Manual", 0x08: "Vari-Program"
}

VARI_PROGRAM_MODES: Dict[int, str] = {
  0x00: "Portrait", 0x01: "Red-Eye Reduction", 0x02: "HyperFocal", 0x03: "Landscape",
  0x04: "Silhouette", 0x05: "Sports", 0x06: "CloseUp", 0x07: "Custom Program"
}

METERING_SYSTEM: Dict[int, str] = {
  0x00: "Center-Weighted", 0x01: "Spot", 0x02: "Matrix"
}

MOTOR_DRIVE_MODES: Dict[int, str] = {
  0x00: "Single", 0x01: "Low-speed", 0x02: "High-speed"
}

FLASH_MODES: Dict[int, str] = {
  0x00: "Normal", 0x01: "Slow", 0x02: "Rear Curtain", 0x03: "None"
}

FOCUS_AREAS: Dict[int, str] = {
  0x00: "Spot", 0x01: "Wide"
}
EXPOSURE_COMPENSATION: Dict[int, float] = {
  0x00: 5.0, 0x01: 4.7, 0x02: 4.3, 0x03: 4.0, 0x04: 3.7, 0x05: 3.3, 0x06: 3.0, 0x07: 2.7,
  0x08: 2.3, 0x09: 2.0, 0x0A: 1.7, 0x0B: 1.3, 0x0C: 1.0, 0x0D: 0.7, 0x0E: 0.3, 0x0F: 0.0,
  0x10: -0.3, 0x11: -0.7, 0x12: -1.0, 0x13: -1.3, 0x14: -1.7, 0x15: -2.0, 0x16: -2.3, 0x17: -2.7,
  0x18: -3.0, 0x19: -3.3, 0x1A: -3.7, 0x1B: -4.0, 0x1C: -4.3, 0x1D: -4.7, 0x1E: -5.0
}

SELF_TIMER_VALUES: Dict[int, str] = {i: f"{i + 2} seconds" for i in range(0x1D)}

MISC_FLAGS: Dict[int, str] = {
  0x04: "Long Exposures use Time [Bulb]",
  0x08: "DX ISO Priority [Manual]",
  0x20: "Frame Counter in Ps Mode [Off]",
  0x40: "Imprint on Frame #0 [Off]",
  0x80: "Force Memo holder Download when full [default stop logging]"
}

AUTOFOCUS_FLAGS: Dict[int, str] = {
  0x10: "AF Continuous Focus Priority [Release]",
  0x20: "Continuous Advance: Lock AF flag",
  0x80: "AF Single Release Priority [Focus]"
}

DUAL_RELEASE_TIMING: Dict[int, str] = {
  0x00: "Independent", 0x04: "Simultaneous", 0x08: "Alternate", 0x0C: "Disabled"
}

BEEP_FLAGS: Dict[int, str] = {
  0x01: "On Exposure Error",
  0x02: "Twice when in Focus",
  0x04: "On Film Operation Error",
  0x08: "During Self Timer countdown"
}

METER_LIGHT_ON_TIME: Dict[int, str] = {
  0x00: "Default [8 seconds]",
  **{i: f"{i * 4} seconds" for i in range(0x04, 0x41, 0x04)}
}


"""
0xFD40  Memo holder settings (1 byte)
        0x00  = Store DISABLED
        0x05	= Store DISABLED but camera has minimum-stored data
        0x0E	= Store DISABLED but camera has intermediate-stored data
        0x1F	= Store DISABLED but camera has maximum-stored data
        0x45  = Store Minimum amount of data
        0x4E  = Store Intermediate amount of data
        0x5F  = Store all data


        Number of rolls that can be stored

          Table 1: F90/N90 Storage

            Storage Mode, Exp/Roll, Rolls
            Minimum, 24, 8
            Minimum, 36, 5
            Intermediate, 24, 4
            Intermediate, 36, 3
            All, 24, 3
            All, 36, 2

          Table 2: F90X/N90s Storage

            Storage Mode, Exp/Roll, Rolls
            Minimum, 24, 143
            Minimum, 36, 99
            Intermediate, 24, 74
            Intermediate, 36, 50
            All, 24, 50
            All, 36, 34
"""
FRAME_SIZES = {0x45: 2, 0x4E: 4, 0x5F: 6}


class F90StorageMode(IntEnum):
    """Storage modes for the F90 camera."""
    DISABLED     = 0
    MINIMUM      = 0x05
    INTERMEDIATE = 0x0E
    ALL_DATA     = 0x1F



# Protocol bytes
STX = 0x02
ETX = 0x03
ACK = b'\x06\x00'
EOT = b'\x04\x04'





# --- Parsing Data Fields ---

def parse_shutter(code: int) -> str:
  return SHUTTER_SPEEDS.get(code, f"Unknown(0x{code:02X})")


def parse_aperture(code: int) -> str:
  return APERTURES.get(code, f"Unknown(0x{code:02X})")


def parse_iso(code: int) -> str:
  return ISO_VALUES.get(code, f"Unknown(0x{code:02X})")


def parse_focal_length(code: int) -> str:
  return FOCAL_LENGTHS.get(code, f"Unknown(0x{code:02X})")


def parse_exposure_mode(code: int) -> str:
  return EXPOSURE_MODES.get(code, f"Unknown(0x{code:02X})")


def parse_camera_mode(code: int) -> str:
  return CAMERA_MODES.get(code, f"Unknown(0x{code:02X})")


def parse_vari_program_mode(code: int) -> str:
  return VARI_PROGRAM_MODES.get(code, f"Unknown(0x{code:02X})")


def parse_metering_mode(code: int) -> str:
  return METERING_SYSTEM.get(code, f"Unknown(0x{code:02X})")


def parse_motor_drive_mode(code: int) -> str:
  return MOTOR_DRIVE_MODES.get(code, f"Unknown(0x{code:02X})")


def parse_flash_mode(code: int) -> str:
  return FLASH_MODES.get(code, f"Unknown(0x{code:02X})")


def parse_focus_area(code: int) -> str:
  return FOCUS_AREAS.get(code, f"Unknown(0x{code:02X})")


def parse_exposure_compensation(code: int) -> str:
  return EXPOSURE_COMPENSATION.get(code, f"Unknown(0x{code:02X})")


def parse_self_timer(code: int) -> str:
  return SELF_TIMER_VALUES.get(code, f"Unknown(0x{code:02X})")


def parse_misc_flag(code: int) -> str:
  return MISC_FLAGS.get(code, f"Unknown(0x{code:02X})")


def parse_autofocus_flag(code: int) -> str:
  return AUTOFOCUS_FLAGS.get(code, f"Unknown(0x{code:02X})")


def parse_dual_release_timing(code: int) -> str:
  return DUAL_RELEASE_TIMING.get(code, f"Unknown(0x{code:02X})")


def parse_beep_flag(code: int) -> str:
  return BEEP_FLAGS.get(code, f"Unknown(0x{code:02X})")


def parse_meter_light_on_time(code: int) -> str:
  return METER_LIGHT_ON_TIME.get(code, f"Unknown(0x{code:02X})")

